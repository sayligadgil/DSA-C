// Function to delete a node at a given position in a doubly linked list
void deleteAtPosition(struct Node** head_ref, int position) {
    // If the list is empty
    if (*head_ref == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* current = *head_ref;

    // Traverse to the node at the specified position
    for (int i = 1; current != NULL && i < position; i++) {
        current = current->next;
    }

    // If the position is out of bounds
    if (current == NULL) {
        printf("Position out of bounds.\n");
        return;
    }

    // If the node to be deleted is the head node
    if (*head_ref == current) {
        *head_ref = current->next;
    }

    // Change next only if the node to be deleted is NOT the last node
    if (current->next != NULL) {
        current->next->prev = current->prev;
    }

    // Change prev only if the node to be deleted is NOT the first node
    if (current->prev != NULL) {
        current->prev->next = current->next;
    }

    // Free the memory occupied by the node
    free(current);
}
